import numpy as np
from matplotlib.colors import LinearSegmentedColormap, ListedColormap


class dictCmap:
    def __init__(self, cdict, N=256):
        """
        Creates colormap from matplotlib.colors.LinearSegmentedColormap().

        Parameters
        ----------
        cdict : dict
            Dictionary with rgb color values.
        N : int
            The number of rgb quantization levels.
        """
        self.cdict = cdict
        self.N = N


class listCmap:
    def __init__(self, colors, nodes):
        """
        Creates colormap from
        matplotlib.colors.LinearSegmentedColormap.from_list().

        Parameters
        ----------
        colors : array-like of colors or array-like of (value, color)
            If only colors are given, they are equidistantly mapped from the
            range; i.e. 0 maps to colors[0] and 1 maps to colors[-1]. If
            (value, color) pairs are given, the mapping is from value to color.
            This can be used to divide the range unevenly.
        nodes : int
            The number of rgb quantization levels.
        """
        self.colors = colors
        self.nodes = nodes


cmaps = {
    "ir": dictCmap(
        cdict={
            "red": [
                [(-90 + 90) / 130, 115 / 255, 115 / 255],
                [(-80 + 90) / 130, 240 / 255, 230 / 255],
                [(-70 + 90) / 130,   0 / 255,   0 / 255],
                [(-60 + 90) / 130, 255 / 255, 255 / 255],
                [(-50 + 90) / 130, 255 / 255, 255 / 255],
                [(-40 + 90) / 130,   0 / 255,   0 / 255],
                [(-30 + 90) / 130,   0 / 255,   0 / 255],
                [(-20 + 90) / 130,   0 / 255, 255 / 255],
                [(40 + 90) / 130,    0 / 255,   0 / 255],
            ],
            "green": [
                [(-90 + 90) / 130,   0 / 255,   0 / 255],
                [(-80 + 90) / 130, 110 / 255, 230 / 255],
                [(-70 + 90) / 130,   0 / 255,   0 / 255],
                [(-60 + 90) / 130,   0 / 255,   0 / 255],
                [(-50 + 90) / 130, 255 / 255, 255 / 255],
                [(-40 + 90) / 130, 255 / 255, 255 / 255],
                [(-30 + 90) / 130,   0 / 255,   0 / 255],
                [(-20 + 90) / 130, 250 / 255, 255 / 255],
                [(40 + 90) / 130,    0 / 255,   0 / 255],
            ],
            "blue": [
                [(-90 + 90) / 130, 115 / 255, 115 / 255],
                [(-80 + 90) / 130, 190 / 255, 230 / 255],
                [(-70 + 90) / 130,   0 / 255,   0 / 255],
                [(-60 + 90) / 130,   0 / 255,   0 / 255],
                [(-50 + 90) / 130,   0 / 255,   0 / 255],
                [(-40 + 90) / 130,   0 / 255,   0 / 255],
                [(-30 + 90) / 130, 120 / 255, 120 / 255],
                [(-20 + 90) / 130, 255 / 255, 255 / 255],
                [(40 + 90) / 130,    0 / 255,   0 / 255],
            ],
        }
    ),
    "qpf": dictCmap(
        cdict={
            "red": [
                [0,                 1,         1],
                [0.5 / 400, 200 / 255, 200 / 255],
                [3 / 400,   150 / 255, 175 / 255],
                [10 / 400,    0 / 255,   0 / 255],
                [25 / 400,  150 / 255, 250 / 255],
                [50 / 400,  125 / 255, 150 / 255],
                [100 / 400, 255 / 255, 255 / 255],
                [200 / 400, 200 / 255, 125 / 255],
                [400 / 400, 225 / 255, 225 / 255],
            ],
            "green": [
                [0,                 1,         1],
                [0.5 / 400, 200 / 255, 200 / 255],
                [3 / 400,   150 / 255, 250 / 255],
                [10 / 400,  100 / 255, 100 / 255],
                [25 / 400,  225 / 255, 175 / 255],
                [50 / 400,   50 / 255,   0 / 255],
                [100 / 400, 175 / 255, 250 / 255],
                [200 / 400, 100 / 255, 125 / 255],
                [400 / 400, 225 / 255, 225 / 255],
            ],
            "blue": [
                [0,                 1,         1],
                [0.5 / 400, 200 / 255, 200 / 255],
                [3 / 400,   150 / 255, 150 / 255],
                [10 / 400,    0 / 255, 150 / 255],
                [25 / 400,  250 / 255, 255 / 255],
                [50 / 400,  150 / 255,  25 / 255],
                [100 / 400, 200 / 255, 150 / 255],
                [200 / 400,  25 / 255, 125 / 255],
                [400 / 400, 225 / 255, 225 / 255],
            ],
        },
        N=256*4
    ),
    "radarscope_trunc": dictCmap(
        cdict={
            "red": [
                [(17 - 17) / 78,   255 / 255, 255 / 255],
                [(22.5 - 17) / 78,  33 / 255,  33 / 255],
                [(32.5 - 17) / 78,   5 / 255,   5 / 255],
                [(37.5 - 17) / 78, 250 / 255, 250 / 255],
                [(42.5 - 17) / 78, 200 / 255, 250 / 255],
                [(50 - 17) / 78,   172 / 255, 253 / 255],
                [(60 - 17) / 78,   135 / 255, 193 / 255],
                [(70 - 17) / 78,   200 / 255, 165 / 255],
                [(75 - 17) / 78,    64 / 255, 135 / 255],
                [(80 - 17) / 78,    54 / 255, 173 / 255],
                [(85 - 17) / 78,   105 / 255, 105 / 255],
                [(95 - 17) / 78,     0 / 255,   0 / 255],
            ],
            "green": [
                [(17 - 17) / 78,   255 / 255, 255 / 255],
                [(22.5 - 17) / 78, 185 / 255, 185 / 255],
                [(32.5 - 17) / 78, 100 / 255, 100 / 255],
                [(37.5 - 17) / 78, 251 / 255, 251 / 255],
                [(42.5 - 17) / 78, 175 / 255, 149 / 255],
                [(50 - 17) / 78,    92 / 255,  38 / 255],
                [(60 - 17) / 78,    43 / 255, 148 / 255],
                [(70 - 17) / 78,    22 / 255,   2 / 255],
                [(75 - 17) / 78,     0 / 255, 255 / 255],
                [(80 - 17) / 78,   120 / 255,  99 / 255],
                [(85 - 17) / 78,     0 / 255,   0 / 255],
                [(95 - 17) / 78,     0 / 255,   0 / 255],
            ],
            "blue": [
                [(17 - 17) / 78,   255 / 255, 255 / 255],
                [(22.5 - 17) / 78,  72 / 255,  72 / 255],
                [(32.5 - 17) / 78,   5 / 255,   5 / 255],
                [(37.5 - 17) / 78,   0 / 255,   0 / 255],
                [(42.5 - 17) / 78,   0 / 255,   2 / 255],
                [(50 - 17) / 78,     2 / 255,   0 / 255],
                [(60 - 17) / 78,    22 / 255, 179 / 255],
                [(70 - 17) / 78,   120 / 255, 215 / 255],
                [(75 - 17) / 78,   146 / 255, 253 / 255],
                [(80 - 17) / 78,   145 / 255,  64 / 255],
                [(85 - 17) / 78,     5 / 255,   5 / 255],
                [(95 - 17) / 78,     0 / 255,   0 / 255],
            ],
        }
    ),
    "severe": dictCmap(
        cdict={
            "red": [
                [0 / 5, 255 / 255, 255 / 255],
                [1 / 5, 127 / 255,  30 / 255],
                [2 / 5, 200 / 255, 250 / 255],
                [3 / 5, 215 / 255, 200 / 255],
                [4 / 5, 250 / 255, 220 / 255],
                [5 / 5, 105 / 255, 105 / 255],
            ],
            "green": [
                [0 / 5, 255 / 255, 255 / 255],
                [1 / 5, 127 / 255, 110 / 255],
                [2 / 5, 220 / 255, 210 / 255],
                [3 / 5,  70 / 255,  20 / 255],
                [4 / 5, 190 / 255, 220 / 255],
                [5 / 5,  80 / 255,  80 / 255],
            ],
            "blue": [
                [0 / 5, 255 / 255, 255 / 255],
                [1 / 5, 127 / 255, 180 / 255],
                [2 / 5, 240 / 255, 160 / 255],
                [3 / 5,   0 / 255,  30 / 255],
                [4 / 5, 160 / 255, 234 / 255],
                [5 / 5, 160 / 255, 160 / 255],
            ],
        }
    ),
    "snow": dictCmap(
        cdict={
            "red": [
                [0,                 1,         1],
                [0.5 / 400, 200 / 255, 200 / 255],
                [3 / 400,   150 / 255, 150 / 255],
                [10 / 400,   10 / 255, 100 / 255],
                [25 / 400,  220 / 255, 200 / 255],
                [50 / 400,  145 / 255, 190 / 255],
                [100 / 400, 250 / 255, 255 / 255],
                [200 / 400, 250 / 255, 125 / 255],
                [400 / 400, 225 / 255, 225 / 255],
            ],
            "green": [
                [0,                 1,         1],
                [0.5 / 400, 200 / 255, 200 / 255],
                [3 / 400,   150 / 255, 140 / 255],
                [10 / 400,  120 / 255,  10 / 255],
                [25 / 400,  150 / 255, 150 / 255],
                [50 / 400,   20 / 255,  25 / 255],
                [100 / 400, 170 / 255, 230 / 255],
                [200 / 400, 160 / 255, 125 / 255],
                [400 / 400, 225 / 255, 225 / 255],
            ],
            "blue": [
                [0,                 1,         1],
                [0.5 / 400, 200 / 255, 200 / 255],
                [3 / 400,   150 / 255, 250 / 255],
                [10 / 400,  160 / 255, 160 / 255],
                [25 / 400,  250 / 255, 170 / 255],
                [50 / 400,   70 / 255,  50 / 255],
                [100 / 400, 180 / 255, 180 / 255],
                [200 / 400,  30 / 255, 125 / 255],
                [400 / 400, 225 / 255, 255 / 255],
            ],
        },
        N=256*4
    ),
    "temperature_fine": dictCmap(
        cdict={
            "red": [
                [(-20 + 20) / 60, 240 / 255, 240 / 255],
                [(-15 + 20) / 60, 200 / 255, 200 / 255],
                [(-10 + 20) / 60, 200 / 255, 200 / 255],
                [(-5 + 20) / 60,   50 / 255,  50 / 255],
                [(-0.1 + 20) / 60, 90 / 255, 200 / 255],
                [(5 + 20) / 60,    90 / 255,  90 / 255],
                [(10 + 20) / 60,   50 / 255,  50 / 255],
                [(15 + 20) / 60,  255 / 255, 255 / 255],
                [(20 + 20) / 60,  225 / 255, 225 / 255],
                [(25 + 20) / 60,  110 / 255, 110 / 255],
                [(30 + 20) / 60,  220 / 255, 220 / 255],
                [(35 + 20) / 60,  255 / 255, 255 / 255],
                [(40 + 20) / 60,  100 / 255, 100 / 255],
            ],
            "green": [
                [(-20 + 20) / 60,  150 / 255, 150 / 255],
                [(-15 + 20) / 60,   40 / 255,  40 / 255],
                [(-10 + 20) / 60,  140 / 255, 140 / 255],
                [(-5 + 20) / 60,   230 / 255, 230 / 255],
                [(-0.1 + 20) / 60, 100 / 255, 175 / 255],
                [(5 + 20) / 60,    225 / 255, 225 / 255],
                [(10 + 20) / 60,   150 / 255, 150 / 255],
                [(15 + 20) / 60,   255 / 255, 255 / 255],
                [(20 + 20) / 60,    10 / 255,  10 / 255],
                [(25 + 20) / 60,    10 / 255,  10 / 255],
                [(30 + 20) / 60,   125 / 255, 125 / 255],
                [(35 + 20) / 60,   220 / 255, 220 / 255],
                [(40 + 20) / 60,   100 / 255, 100 / 255],
            ],
            "blue": [
                [(-20 + 20) / 60,  200 / 255, 200 / 255],
                [(-15 + 20) / 60,  210 / 255, 210 / 255],
                [(-10 + 20) / 60,  220 / 255, 200 / 255],
                [(-5 + 20) / 60,   245 / 255, 245 / 255],
                [(-0.1 + 20) / 60, 225 / 255, 255 / 255],
                [(5 + 20) / 60,    220 / 255, 220 / 255],
                [(10 + 20) / 60,    50 / 255,  50 / 255],
                [(15 + 20) / 60,   100 / 255, 100 / 255],
                [(20 + 20) / 60,    10 / 255,  10 / 255],
                [(25 + 20) / 60,    50 / 255,  50 / 255],
                [(30 + 20) / 60,   200 / 255, 200 / 255],
                [(35 + 20) / 60,   255 / 255, 255 / 255],
                [(40 + 20) / 60,   100 / 255, 100 / 255],
            ],
        }
    ),
    "tpw": listCmap(
        colors=[
            [116 / 255,  10 / 255, 142 / 255],
            [95 / 255,   33 / 255, 160 / 255],
            [74 / 255,   55 / 255, 182 / 255],
            [54 / 255,   74 / 255, 202 / 255],
            [32 / 255,   95 / 255, 226 / 255],
            [9 / 255,   118 / 255, 245 / 255],
            [18 / 255,  141 / 255, 255 / 255],
            [39 / 255,  165 / 255, 254 / 255],
            [56 / 255,  181 / 255, 255 / 255],
            [77 / 255,  206 / 255, 255 / 255],
            [98 / 255,  228 / 255, 254 / 255],
            [124 / 255, 253 / 255, 255 / 255],
            [126 / 255, 254 / 255, 214 / 255],
            [129 / 255, 255 / 255, 181 / 255],
            [127 / 255, 255 / 255, 134 / 255],
            [167 / 255, 255 / 255, 129 / 255],
            [210 / 255, 255 / 255, 128 / 255],
            [245 / 255, 255 / 255, 127 / 255],
            [254 / 255, 239 / 255, 109 / 255],
            [253 / 255, 215 / 255,  89 / 255],
            [255 / 255, 195 / 255,  67 / 255],
            [254 / 255, 173 / 255,  45 / 255],
            [255 / 255, 151 / 255,  25 / 255],
            [254 / 255, 131 / 255,   7 / 255],
            [236 / 255, 109 / 255,   2 / 255],
            [212 / 255,  90 / 255,   0 / 255],
            [192 / 255,  64 / 255,   1 / 255],
            [173 / 255,  47 / 255,   4 / 255],
            [156 / 255,  24 / 255,   1 / 255],
            [130 / 255,   3 / 255,   0 / 255],
        ],
        nodes=np.linspace(0, 1, 30)
    ),
    "wind": listCmap(
        colors=[
            [160 / 255, 240 / 255, 245 / 255],
            [50 / 255,   50 / 255, 255 / 255],
            [250 / 255, 120 / 255, 230 / 255],
            [160 / 255,  20 / 255,  40 / 255],
            [250 / 255, 220 / 255, 100 / 255],
        ],
        nodes=np.linspace(0, 1, 5)
    ),
}


def get_cmap(name):
    """
    Gets custom colormap.

    Parameters
    ----------
    name : str
        Name of colormap.

    Returns
    -------
    matplotlib.colors.LinearSegmentedColormap
        Custom colormap.
    """
    if name[-2:] == "_r":
        name = name[:-2]
        reverse = True
    else:
        reverse = False

    if isinstance(cmaps[name], dictCmap):
        if reverse:
            return LinearSegmentedColormap(
                "ccmap",
                segmentdata=cmaps[name].cdict, N=cmaps[name].N).reversed()
        else:
            return LinearSegmentedColormap(
                "ccmap", segmentdata=cmaps[name].cdict, N=cmaps[name].N)
    elif isinstance(cmaps[name], listCmap):
        if reverse:
            return LinearSegmentedColormap.from_list(
                "ccmap", list(zip(
                    cmaps[name].nodes,
                    reversed(cmaps[name].colors))))
        else:
            return LinearSegmentedColormap.from_list(
                "ccmap", list(zip(cmaps[name].nodes, cmaps[name].colors)))


def mask_cmap():
    """
    Returns
    -------
    matplotlib.colors.ListedColorMap
        Grey colormap for mask.
    """
    return ListedColormap(["Grey"])
